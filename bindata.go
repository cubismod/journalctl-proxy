package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x6d\x6f\x9b\x4a\x16\xfe\xee\x5f\x31\x97\xdb\x15\x20\xc5\x10\xb7\xd2\x2a\x72\xc0\x52\x36\xf1\xae\xb2\x6a\xd2\xa8\x76\xd4\xad\xba\x55\x3a\x86\x63\x98\xcd\x30\x43\x67\x8e\x43\xbc\x55\xfe\xfb\xd5\x30\x80\xc1\x76\x22\x35\x1f\xe2\x19\xce\x79\xce\xcb\x73\x5e\x8c\xa3\x3f\xae\x3e\x5d\x2e\xbf\xde\xcd\x49\x8e\x05\x9f\x8d\x22\xf3\x41\x38\x15\x59\xec\x80\x70\x66\xa3\x11\x21\x51\x0e\x34\x9d\x8d\x08\x21\x24\x2a\x00\x29\x49\x72\xaa\x34\x60\xec\xdc\x2f\xff\x39\x3e\x73\xfa\xa2\x1c\xb1\x1c\xc3\xcf\x0d\x7b\x8a\x9d\xff\x8c\xef\x2f\xc6\x97\xb2\x28\x29\xb2\x15\x07\x87\x24\x52\x20\x08\x8c\x9d\xeb\x79\x0c\x69\x06\x03\xa4\xa0\x05\xc4\xce\x13\x83\xaa\x94\x0a\x7b\xca\x15\x4b\x31\x8f\x53\x78\x62\x09\x8c\xeb\xcb\x09\x61\x82\x21\xa3\x7c\xac\x13\xca\x21\x9e\x04\xa7\xad\x29\x64\xc8\x61\xf6\x3f\xb9\x51\x82\xf2\x04\x79\x14\xda\x27\x23\x2b\xd6\xb8\x35\x17\x52\xff\xad\x64\xba\x25\xbf\x9a\x0b\x21\x6b\x29\x70\xbc\xa6\x05\xe3\xdb\x29\x71\x2f\xe5\x46\x31\x50\xe4\x16\x2a\xf7\x84\x34\xb7\x13\x52\x48\x21\x75\x49\x13\x38\x1f\xe2\x34\xfb\x3f\x4c\xc9\xe4\x43\xf9\xdc\x0a\x5e\x46\xcd\xc1\xb0\x07\xaa\xe7\x28\x65\xba\xe4\x74\x3b\x25\x6b\x0e\xcf\x3b\x3b\x94\xb3\x4c\x8c\x19\x42\xa1\xa7\x24\x01\x81\xa0\x5e\xb3\x95\x4f\xfa\x71\x73\x78\x1e\x67\x4a\x56\x53\x32\x39\x00\x20\x5d\x71\xe8\x29\xaf\xa4\x4a\x41\x8d\x13\xc9\x39\x2d\x35\x4c\x49\x7b\x3a\x74\x85\x05\xff\x96\x52\xa4\x63\xcc\xa1\x80\xd8\x4d\xa9\x7a\x74\xbf\xf7\x6c\x11\xb2\xa2\xc9\x63\xa6\xe4\x46\xa4\x53\xf2\xe7\xfb\xb3\xf7\xf4\xc3\xdf\xcf\x7b\xe2\x44\x72\xa9\xa6\xe4\xcf\xf5\xd9\xfa\x6c\xfd\x7e\xcf\x43\x14\x36\xc5\x30\x1d\x16\xda\x16\x33\x47\x53\x95\xae\x5c\x89\x62\x25\xb6\xf5\x1a\xb5\x56\x85\xc6\x3a\x3c\x12\x93\x54\x26\x9b\x02\x04\x06\x19\xe0\x9c\x83\x39\xea\x7f\x6c\x97\x34\xbb\xa5\x05\x78\xae\xd1\x72\xfd\x6f\xa7\xdf\xdb\xac\xd6\x1b\x91\x20\x93\x82\xa0\xcc\x32\x0e\x4b\x93\x9a\xe7\xf7\x92\xe2\x80\x24\xd9\x28\x05\x02\x6b\x21\x89\x6b\x57\x81\x61\x42\x03\x06\x35\x19\x9d\x36\x5b\x13\x6f\xa8\x1d\xc7\xc4\x32\xe5\x1f\xc1\x91\x98\xb8\x9c\x65\x39\xba\x9d\x05\xe0\x1a\x5e\xd1\xac\xcd\x74\xa4\x35\x9c\x35\x8c\xd8\xab\x6d\x87\x96\x9f\x28\x9f\xf4\x3a\x9f\x94\x4a\x3e\x6f\xa3\x30\x9f\x74\xf2\x94\x3d\xcd\x3a\xc7\x91\x06\x0e\x09\x12\x29\x92\x9c\x8a\x0c\x62\x47\x23\x55\xf8\x91\x69\x04\xc1\x44\xb6\x94\x0b\x50\x66\xe6\x3c\xdf\x99\xf5\x8a\x1a\xc9\xd2\x10\x38\xa3\x9c\x47\x61\x73\xde\x19\x0d\xad\xd5\xde\x93\xd5\x06\x51\x0a\xe3\x86\xb3\xe4\x31\x76\x06\xc4\x3b\xb3\x65\x7d\x25\x37\x32\x85\x28\xb4\xba\x5d\xbc\x61\x17\xb0\x6d\x10\x93\xea\xa8\xcd\x84\xd4\xed\x13\x3b\xf2\x09\xd4\x9a\xcb\x6a\xfc\x3c\xa5\x1b\x94\xe7\x5d\xb0\x91\xed\x7d\xdb\xf1\xb1\x33\x71\x88\xdd\x24\xce\xe4\xf4\xf4\x6f\xbd\x94\x22\xdc\xed\xb7\xf6\x89\xea\x5f\x6b\x95\xd9\xdd\xf5\x55\x14\x62\x7e\x28\xb8\x17\x0c\x8f\x4b\x96\xac\x00\x8d\xb4\x28\x8f\x8b\x6f\x40\x6b\x9a\xc1\xbe\x30\x0a\xfb\xee\x8d\x74\x10\x5e\x84\xf5\x84\x44\xa1\xfd\xec\xb8\xaa\xb3\x6d\xd9\xea\x88\xdb\x1b\xa4\xd1\xae\xc9\xb5\x4c\x1e\x01\x49\x4c\xc4\x86\xf3\xf3\xd1\x60\xb8\x9a\xd6\xe8\x8d\xd7\xcf\x0d\xa8\xed\xa2\x7e\x2c\x95\xe7\x5a\x05\xd7\x3f\x1f\xc0\x2c\xe1\xaf\xa3\x6a\xb9\x01\x35\x28\x8f\xea\xad\x48\x88\xe7\x93\x78\xd6\x1b\xc1\x36\x86\xba\xfb\xf4\x67\xf8\xb9\x01\x6d\x82\xa1\x15\x65\x48\xd6\x80\x49\xee\xb9\x21\x67\x1a\xc7\xad\xd2\x2e\x92\x7d\xb8\xe9\xe7\x0e\xbb\x67\x33\x40\x78\x46\x6f\x17\x8f\xd9\xe5\x8a\x78\x86\x1d\xce\x04\x10\xb9\x1e\x98\x09\x74\xc9\x19\x7a\xee\x7f\x85\xeb\xfb\x83\x3d\x58\x6b\xc7\xf5\x47\x80\x8a\x15\x9e\xdf\x5f\x83\x66\x49\x58\x0d\xb3\x1c\x5c\x9f\xac\x14\xd0\xc7\x9e\x57\xab\xf2\x47\x0d\xaf\x87\x50\x7f\x61\x98\x7b\xee\xfd\xed\xf5\x72\xdf\xd5\x5e\x7e\x66\xcd\xb5\x9e\x9b\xf0\x48\xbd\xf0\xce\x8f\x60\xec\xb4\xf6\x0b\x94\x28\xa0\x08\xcd\xe2\xf4\x5c\xab\xe0\xfa\x43\xb0\x7d\x1a\x3c\x51\xbe\x31\xbe\x7a\x9e\x5b\x97\xc1\x11\x97\x0d\x8a\x09\x01\x6a\x09\xcf\x38\x44\x0e\x75\x6d\x3b\x05\xb4\x2c\x41\xa4\x97\x39\xe3\xa9\x67\xe1\x7e\x4f\xed\x65\xb4\x7f\x7a\xf1\x7b\xc5\xeb\x36\xfb\xab\x6b\xac\xc7\xa3\xe1\xdb\x0e\xc0\x90\x5d\xfb\x2c\x48\xb8\xd4\xe0\x4d\x4e\x4f\x4f\x4f\x88\xfb\x45\xaa\x47\x92\xc8\xa2\xe4\x80\xd0\xe7\xe6\x65\x57\xc1\xdd\x30\x41\x45\xbe\xc0\x6a\x51\xdf\xbd\x1f\x95\x9e\x86\xe1\xbb\x5f\x15\x13\xa9\xac\x02\x2e\x13\x5a\x93\x92\x4b\x8d\x2f\x61\xa5\xc3\x77\xbf\x9a\xd4\x6b\x72\x5f\x7e\xf4\x7b\xb1\x89\x45\x0a\x59\x82\x29\x5a\x97\xa0\x07\xc3\xa0\x4d\x71\x25\x87\x80\xcb\xcc\xfb\xf1\xcd\x68\x7f\x27\x97\x52\x08\xb0\xea\x66\x05\xad\x38\xd3\x39\xa4\xa4\x62\x98\xb7\x65\x98\x92\x23\xde\xbb\xdc\x8e\x05\x52\xd8\x85\x35\x8c\xe5\x09\x04\x1e\xc6\x83\x84\x89\x44\x16\x4c\x64\x37\x1d\xe8\xdf\x8b\x4f\xb7\x41\x69\x5e\x1d\x2d\xaa\xfe\xc6\xf3\x07\x73\x60\xa1\x4a\x56\x6f\x34\x29\xaa\x61\x83\x5a\x4c\xc9\xd2\xb7\x30\xe9\x51\x8c\x62\x52\x31\xdc\xfe\x36\x50\x6f\x35\x42\x91\x9a\xcd\xff\xdb\x58\x05\x94\x23\x2b\xa0\xfb\x72\xf8\x6d\x0b\xbb\x32\xbc\x8d\x3b\xe6\x3a\x35\x2b\xf8\xaa\xed\xd4\x2b\x8a\xe0\xd5\x15\xb9\x16\xe8\xed\x55\x2c\x78\x78\xf8\x3c\xbf\xf8\xb8\xbc\xbe\x99\x3f\x98\x7f\x8b\xe5\xc5\xcd\x9d\x1f\x9a\xa9\x18\x1a\x2f\x59\x3a\x18\xf3\x03\x3b\x77\xd7\x57\xfd\x2c\x7a\xec\xbd\x8d\x5b\x7c\x5d\x2c\xe7\x37\x57\x0f\x66\x0f\xf6\x0d\x1c\x50\x38\x30\xb3\xcb\x32\x40\xf9\x51\x9a\x5f\x08\x0b\x54\x4c\x64\xc3\xad\xdc\xb0\xf8\x66\x04\x37\xf3\xc5\xe2\xe2\x5f\xf3\x41\xb6\x4a\x56\x83\x45\x55\xb2\x74\x60\x77\x5f\xde\xcb\xf6\x4d\xbd\x83\xa4\xde\xd4\x6e\xa2\x1f\x16\xa2\xfe\x7e\x1d\x1a\x95\xd5\x70\xa8\x9b\xc3\xe8\xf0\x75\x32\x0a\x9b\x37\xef\x28\xb4\x3f\x05\xff\x0a\x00\x00\xff\xff\x4f\x36\x76\x04\x1b\x0e\x00\x00")

func assets_index_html() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/index.html": assets_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
	}},
}}
