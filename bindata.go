package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x6d\x6f\xe2\xca\x15\xfe\xce\xaf\x38\x97\x7b\x2b\x1b\x69\xb1\x61\xef\xb6\x4d\xc1\x46\x4a\x13\x5a\xa5\xda\xe4\x46\x17\xa2\xed\xd5\x76\x95\x1d\xec\x83\x3d\xcd\x78\xc6\x3b\x73\x80\xd0\x55\xfe\x7b\x35\x7e\xc3\x06\x12\x69\xf3\x21\xcc\xf8\x9c\xe7\xbc\x3c\xe7\xc5\x10\xfc\x74\xfd\xdb\xd5\xf2\x8f\xfb\x39\xa4\x94\x89\x59\x2f\xb0\x1f\x20\x98\x4c\xc2\x3e\xca\xfe\xac\xd7\x03\x08\x52\x64\xf1\xac\x07\x00\x10\x64\x48\x0c\xa2\x94\x69\x83\x14\xf6\x1f\x96\xff\x18\x5e\xf4\xdb\xa2\x94\x28\x1f\xe2\xb7\x0d\xdf\x86\xfd\x7f\x0f\x1f\x2e\x87\x57\x2a\xcb\x19\xf1\x95\xc0\x3e\x44\x4a\x12\x4a\x0a\xfb\x37\xf3\x10\xe3\x04\x3b\x48\xc9\x32\x0c\xfb\x5b\x8e\xbb\x5c\x69\x6a\x29\xef\x78\x4c\x69\x18\xe3\x96\x47\x38\x2c\x2e\xef\x80\x4b\x4e\x9c\x89\xa1\x89\x98\xc0\x70\xec\x8d\x6a\x53\xc4\x49\xe0\xec\xbf\x6a\xa3\x25\x13\x11\x89\xc0\x2f\x9f\xf4\x4a\xb1\xa1\xbd\xbd\x40\xf1\xb7\x52\xf1\x1e\xbe\x57\x17\x80\xb5\x92\x34\x5c\xb3\x8c\x8b\xfd\x04\x9c\x2b\xb5\xd1\x1c\x35\xdc\xe1\xce\x79\x07\xd5\xed\x1d\x64\x4a\x2a\x93\xb3\x08\xa7\x5d\x9c\xe1\xff\xc3\x09\x8c\x7f\xcd\x9f\x6b\xc1\x4b\xaf\x3a\x58\xf6\x50\xb7\x1c\xc5\xdc\xe4\x82\xed\x27\xb0\x16\xf8\x7c\xb0\xc3\x04\x4f\xe4\x90\x13\x66\x66\x02\x11\x4a\x42\xfd\x9a\xad\x74\xdc\x8e\x5b\xe0\xf3\x30\xd1\x6a\x37\x81\xf1\x09\x80\xd8\x4a\x60\x4b\x79\xa5\x74\x8c\x7a\x18\x29\xa1\xf4\x04\x7e\xfe\xf0\xe1\xc3\x5f\xff\xcc\xa6\x67\xc4\x82\xe5\x06\x27\x50\x9f\x4e\x23\xa1\x4c\x7c\x8e\x19\xb1\x21\xa5\x98\x61\xe8\xc4\x4c\x3f\x39\x5f\x5a\xae\x00\x56\x2c\x7a\x4a\xb4\xda\xc8\x78\x02\x3f\xbf\xbf\x78\xcf\x7e\xfd\xcb\xb4\x25\xae\x83\x58\x5f\xac\x2f\xd6\xef\x8f\x3c\x04\x7e\x55\x2b\xdb\x80\x7e\xd9\x81\xf6\x68\x8b\xd6\x54\x33\xd2\x3c\xa7\xba\x9c\xbd\xda\xaa\x34\x54\x84\x07\x21\xc4\x2a\xda\x64\x28\xc9\x4b\x90\xe6\x02\xed\xd1\xfc\x7d\xbf\x64\xc9\x1d\xcb\xd0\x75\xac\x96\x33\xf8\x3c\xfa\x52\x67\xb5\xde\xc8\x88\xb8\x92\x40\x2a\x49\x04\x2e\x6d\x6a\xee\xa0\x95\x94\x40\x82\x68\xa3\x35\x4a\x2a\x84\x10\x16\xae\x3c\xcb\x84\x41\xf2\x0a\x32\x1a\x6d\xbe\x06\xb7\xab\x1d\x86\x50\x32\x35\x38\x83\x83\x10\x1c\xc1\x93\x94\x9c\xc6\x02\x0a\x83\xaf\x68\x16\x66\x1a\xd2\x2a\xce\x2a\x46\xca\x6b\xd9\x2d\x35\x3f\x41\x3a\x6e\x0d\x06\xe4\x5a\x3d\xef\x03\x3f\x1d\x37\xf2\x98\x6f\x67\x8d\xe3\xc0\xa0\xc0\x88\x40\xc9\x28\x65\x32\xc1\xb0\x6f\x88\x69\xfa\xc8\x0d\xa1\xe4\x32\x59\xaa\x05\x6a\x3b\x92\xee\xa0\x3f\x6b\x15\x35\x50\xb9\x25\x70\xc6\x84\x08\xfc\xea\x7c\x30\xea\x97\x56\x5b\x4f\x56\x1b\x22\x25\xad\x1b\xc1\xa3\xa7\xb0\xdf\x21\xbe\x3f\x5b\x16\x57\xb8\x55\x31\x06\x7e\xa9\xdb\xc4\xeb\x37\x01\x97\x0d\x62\x53\xed\xd5\x99\x40\xd1\x3e\x61\x5f\x6d\x51\xaf\x85\xda\x0d\xf7\x13\x30\x91\x56\x42\x4c\x21\x45\x4b\xf2\x04\xfe\x36\xda\xa6\x53\x50\x1b\x12\x5c\xe2\xb0\x00\x4c\x80\x6d\x48\x4d\x9b\x94\x82\x72\x80\xca\x1d\xd4\x1f\x8f\x46\x7f\x6a\x65\x1b\xd0\x61\x33\xd6\x4f\x74\xfb\x5a\xa8\xcc\xee\x6f\xae\x03\x9f\xd2\x53\xc1\x83\xe4\x74\x5e\xb2\xe4\x19\x1a\x62\x59\x7e\x5e\x7c\x8b\xc6\xb0\x04\x8f\x85\x81\xdf\x76\x6f\xa5\x9d\xf0\x02\x2a\x86\x27\xf0\xcb\xcf\x86\xc6\x22\xc5\x9a\xc8\x86\xd3\xa3\x19\xeb\x1d\xfa\xdf\xa8\xe8\x09\x09\x42\x90\x1b\x21\xa6\xbd\xce\xdc\x55\x5d\xd3\x9a\xbc\x6f\x1b\xd4\xfb\x45\xf1\x58\x69\xd7\x29\x15\x9c\xc1\xb4\x03\x2b\x59\x7e\x1d\x55\xc8\x2d\xa8\x42\xb9\xcc\xec\x65\x04\xee\x00\xc2\x59\x6b\x3a\xeb\x18\x8a\xc6\x34\xbf\xe3\xb7\x0d\x1a\x1b\x0c\xdb\x31\x4e\xb0\x46\x8a\x52\xd7\xf1\x05\x37\x34\xac\x95\x0e\x91\x1c\xc3\x6d\xab\x37\xd8\x23\x9b\x1e\xe1\x33\xb9\x87\x78\xec\x5b\x40\x83\x6b\xd9\xb1\xbd\x04\x6a\xdd\x31\xe3\x99\x5c\x70\x72\x9d\xff\x48\x67\x30\xe8\xac\xc8\x42\x3b\x2c\x3e\x3c\xd2\x3c\x73\x07\xed\x0d\x69\xf7\x47\xa9\x61\xf7\x86\x33\x80\x95\x46\xf6\xd4\xf2\x5a\xaa\xfc\x54\xc0\x8b\xf9\x34\x9f\x38\xa5\xae\xf3\x70\x77\xb3\x3c\x76\x75\x94\x9f\xdd\x80\xb5\xe7\x2a\x3c\x28\x76\xe1\xf4\x0c\xa6\x1c\xe4\x76\x81\x22\x8d\x8c\xb0\xda\xa9\xae\x53\x2a\x38\x83\x2e\xb8\x7c\xea\x6d\x99\xd8\x58\x5f\x2d\xcf\xb5\x4b\xef\x8c\xcb\x0a\xc5\xa5\x44\xbd\xc4\x67\xea\x22\xbb\xba\x65\x3b\x79\x2c\xcf\x51\xc6\x57\x29\x17\xb1\x5b\xc2\x07\x2d\xb5\x97\xde\xf1\xe9\x65\xd0\x2a\x5e\xb3\xf4\x5f\xdd\x70\x2d\x1e\x2d\xdf\xe5\x00\x74\xd9\x2d\x9f\x79\x91\x50\x06\xdd\xf1\x68\x34\x7a\x07\xce\x27\xa5\x9f\x20\x52\x59\x2e\x90\xb0\xcd\xcd\xcb\xa1\x82\x87\x61\xc2\x1d\x7c\xc2\xd5\xa2\xb8\xbb\x5f\x77\x66\xe2\xfb\xbf\x7c\xdf\x71\x19\xab\x9d\x27\x54\xc4\x0a\x52\x52\x65\xe8\xc5\xdf\x19\xff\x97\xef\x55\xea\x05\xb9\x2f\x5f\xdb\xbd\x58\xc5\xa2\xa4\xca\xd1\x16\xad\x49\xd0\xc5\x6e\xd0\xb6\xb8\x4a\xa0\x27\x54\xe2\x7e\xfd\x6c\xb5\xbf\xc0\x95\x92\x12\x4b\x75\xbb\x82\x56\x82\x9b\x14\x63\xd8\x71\x4a\xeb\x32\x4c\xe0\x8c\xf7\x26\xb7\x73\x81\x64\xe5\xc2\xea\xc6\xb2\x45\x49\xa7\xf1\x10\x70\x19\xa9\x8c\xcb\xe4\xb6\x01\xfd\x6b\xf1\xdb\x9d\x97\xdb\x2f\x9d\x25\xaa\x78\x19\x0e\x3a\x73\x50\x42\xb5\xda\xbd\xd1\xa4\xa4\xbb\x0d\x5a\x62\x72\x1e\xbf\x85\x89\xcf\x62\x34\x57\x9a\xd3\xfe\x87\x81\x66\x6f\x08\xb3\xd8\x6e\xfe\x1f\xc6\x6a\x64\x82\x78\x86\xcd\xcb\xe1\x87\x2d\x1c\xca\xf0\x36\xee\x9c\xeb\xd8\xae\xe0\xeb\xba\x53\xaf\x19\xa1\x5b\x54\xe4\x46\x92\x7b\x54\x31\xef\xf1\xf1\xf7\xf9\xe5\xc7\xe5\xcd\xed\xfc\xd1\xfe\x5b\x2c\x2f\x6f\xef\x07\xbe\x9d\x8a\xae\xf1\x9c\xc7\x9d\x31\x3f\xb1\x73\x7f\x73\xdd\xce\xa2\xc5\xde\xdb\xb8\xc5\x1f\x8b\xe5\xfc\xf6\xfa\xd1\xee\xc1\xb6\x81\x13\x0a\x3b\x66\x0e\x59\x7a\xa4\x3e\x2a\xfb\xdb\x62\x41\x9a\xcb\xa4\xbb\x95\x2b\x16\xdf\x8c\xe0\x76\xbe\x58\x5c\xfe\x73\xde\xc9\x56\xab\x5d\x67\x51\xe5\x3c\xee\xd8\x3d\x96\xb7\xb2\x7d\x53\xef\x24\xa9\x37\xb5\xab\xe8\xbb\x85\x28\xde\xaf\x5d\xa3\x6a\xd7\x1d\xea\xea\xd0\x3b\xfd\xa6\x19\xf8\xd5\x97\xf2\xc0\x2f\x7f\x44\xfe\x3f\x00\x00\xff\xff\x74\x91\x1d\x9f\x55\x0e\x00\x00")

func assets_index_html() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/index.html": assets_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
	}},
}}
