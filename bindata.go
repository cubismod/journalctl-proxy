package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x6d\x6f\xdb\xc8\x11\xfe\xae\x5f\x31\xc7\xbb\x82\x14\x60\x92\xf2\x35\x6d\x53\x89\x14\x90\xb3\xdd\xd6\x45\x9c\x0b\x4e\x0a\xd2\x43\x1a\x24\x2b\x72\x44\x6e\xbd\xdc\x65\x76\x47\x92\x55\xc3\xff\xbd\x58\xbe\x89\x94\x64\x17\xc9\x87\x90\xbb\x33\xcf\xcc\xec\x33\x2f\x5c\x39\xfa\xe1\xfa\xd7\xab\xe5\xef\xef\x6f\x20\xa7\x42\xcc\x47\x91\x7d\x80\x60\x32\x8b\x1d\x94\xce\x7c\x34\x02\x88\x72\x64\xe9\x7c\x04\x00\x10\x15\x48\x0c\x92\x9c\x69\x83\x14\x3b\x1f\x96\x7f\xf3\x5f\x3b\x7d\x51\x4e\x54\xfa\xf8\x6d\xc3\xb7\xb1\xf3\x2f\xff\xc3\x1b\xff\x4a\x15\x25\x23\xbe\x12\xe8\x40\xa2\x24\xa1\xa4\xd8\xb9\xbd\x89\x31\xcd\x70\x80\x94\xac\xc0\xd8\xd9\x72\xdc\x95\x4a\x53\x4f\x79\xc7\x53\xca\xe3\x14\xb7\x3c\x41\xbf\x5a\x5c\x00\x97\x9c\x38\x13\xbe\x49\x98\xc0\xf8\x32\x98\xb4\xa6\x88\x93\xc0\xf9\x7f\xd4\x46\x4b\x26\x12\x12\x51\x58\xef\x8c\x6a\xb1\xa1\xbd\x5d\x40\xf5\x6f\xa5\xd2\x3d\x3c\x36\x0b\x80\xb5\x92\xe4\xaf\x59\xc1\xc5\x7e\x0a\xee\x95\xda\x68\x8e\x1a\xde\xe1\xce\xbd\x80\x66\x75\x01\x85\x92\xca\x94\x2c\xc1\xd9\x10\x67\xf8\x7f\x71\x0a\x97\x93\xf2\xa1\x15\x3c\x8d\x9a\x17\xcb\x1e\xea\x9e\xa3\x94\x9b\x52\xb0\xfd\x14\xd6\x02\x1f\x0e\x76\x98\xe0\x99\xf4\x39\x61\x61\xa6\x90\xa0\x24\xd4\xcf\xd9\xca\x2f\xfb\x71\x0b\x7c\xf0\x33\xad\x76\x53\xb8\x3c\x01\x10\x5b\x09\xec\x29\xaf\x94\x4e\x51\xfb\x89\x12\x4a\x4f\xe1\xc7\x57\xaf\x5e\xfd\xe5\x4f\x6c\x76\x46\x2c\x58\x69\x70\x0a\xed\xdb\xa9\xe1\xb4\x67\xb5\x64\x69\xca\x65\x36\x85\x57\xe7\xce\x4f\x85\xf8\x94\x32\x62\x3e\xe5\x58\x60\xec\xa6\x4c\xdf\xbb\x9f\x7b\x70\x80\x15\x4b\xee\x33\xad\x36\x32\x9d\xc2\x8f\x3f\xbf\xfe\x99\xfd\xf1\xcf\xb3\x9e\xb8\x0d\x77\xfd\x7a\xfd\x7a\xfd\xf3\xc1\x43\xfd\x0c\x36\x92\x13\x3c\x42\x07\x20\x7c\x20\xbf\xa2\xf3\x94\xc8\x06\x42\xbc\x40\x43\xac\x28\x7b\x61\xfc\x3f\x58\x14\x36\xe5\x63\x7b\x22\xac\x9b\xc2\xbe\xda\x3a\xea\x0a\x2c\xd1\xbc\xa4\xb6\xc2\x46\x6d\xf8\xd2\x50\xc5\x03\xc4\x90\xaa\x64\x53\xa0\xa4\x20\x43\xba\x11\x68\x5f\xcd\x2f\xfb\x25\xcb\xde\xb1\x02\x3d\xd7\x6a\xb9\xe3\x4f\x93\xcf\x2d\x7d\xeb\x8d\x4c\x88\x2b\x09\xa4\xb2\x4c\xe0\xd2\x72\xe8\x8d\x7b\x61\x0b\x24\x48\x36\x5a\xa3\xa4\x4a\x08\x71\xe5\x2a\xb0\x94\x1b\xa4\xa0\x62\xbd\xd3\xe6\x6b\xf0\x86\xda\x71\x0c\x75\x4a\xc6\x67\x70\x10\x83\x2b\x78\x96\x93\xdb\x59\x40\x61\xf0\x19\xcd\xca\xcc\x31\x67\x0d\x23\xf5\xb2\x2e\xe0\x96\x9f\x28\xbf\xec\xf5\x2a\x94\x5a\x3d\xec\xa3\x30\xbf\xec\xe4\x29\xdf\xce\x3b\xc7\x91\x41\x81\x09\x81\x92\x49\xce\x64\x86\xb1\x63\x88\x69\x7a\xcb\x0d\xa1\xe4\x32\x5b\xaa\x05\x6a\x3b\x25\xbc\xb1\x33\xef\x55\x4f\xa4\x4a\x4b\xe0\xdc\x6f\xf0\x0c\x4c\xad\x07\x4a\x03\x13\xc2\x8f\xc2\x46\xe3\x0c\x88\x09\x71\x2a\x8e\xc2\xda\x54\x6f\x67\xb5\x21\x52\xd2\xc6\x26\x78\x72\x1f\x3b\x83\x6c\x39\xf3\x65\xb5\x84\x3b\x95\x62\x14\xd6\xba\xdd\x21\xc3\xee\x94\x75\x55\x59\x7e\x46\xed\xf1\xa1\xaa\xb9\xd8\x51\x5b\xd4\x6b\xa1\x76\xfe\x7e\x0a\x26\xd1\x4a\x88\x19\xe4\x68\x33\x33\x85\xbf\x4e\xb6\xf9\x0c\xd4\x86\x04\x97\xe8\x57\x80\x29\xb0\x0d\xa9\x99\x03\x3c\x8d\x9d\x5a\x1f\x75\xc7\x4a\x54\x8f\x85\x7a\xb2\x3a\x97\x93\xc9\x1f\x7a\x84\x45\x74\x98\xf7\xed\x8e\xee\x2f\x2b\x95\xf9\xfb\xdb\xeb\x28\xa4\xfc\x54\xf0\x41\x72\x3a\x2f\x59\xb6\x4d\x77\x5e\x7c\x87\xc6\xb0\x0c\x8f\x85\x51\xd8\x77\x6f\xa5\x83\xf0\x22\xaa\xfa\x2f\x0a\xeb\x67\x47\x6a\x75\xc4\x96\xd6\x8e\xe1\xa3\x36\x6d\xb4\x6d\x0b\x19\x95\xdc\x23\x41\x0c\x72\x23\xc4\x6c\x34\x68\xdd\xa6\x70\x7a\xcd\xfb\x6d\x83\x7a\xbf\xa8\xb6\x95\xf6\xdc\x5a\xc1\x1d\xcf\x06\xb0\x9a\xe5\xe7\x51\x95\xdc\x82\x1a\x94\xc7\xcc\x5e\x26\xe0\x8d\x21\x9e\xf7\x1a\xbc\x8d\xa1\xaa\x59\xf3\x1b\x7e\xdb\xa0\xb1\xc1\xb0\x1d\xe3\x04\x6b\xa4\x24\xf7\xdc\x50\x70\x43\x7e\xab\x74\x88\xe4\x18\x6e\xbb\xa5\xc3\x1e\xd9\x0c\xec\x04\xf4\x0e\xf1\xd8\x6f\x9b\x06\xcf\xb2\x63\x2b\x0b\xd4\x7a\x60\x26\x30\xa5\xe0\xe4\xb9\xff\x96\xee\x78\x3c\x18\xe7\x95\x76\x5c\x3d\x02\xd2\xbc\xf0\xc6\xfd\x69\x6e\x47\x50\xad\x61\x47\x8f\x3b\x86\x95\x46\x76\xdf\xf3\x5a\xab\xfc\x50\xc1\xab\x16\x37\x1f\x39\xe5\x9e\xfb\xe1\xdd\xed\xf2\xd8\xd5\xd1\xf9\xec\x10\x6d\x3d\x37\xe1\x41\x35\x4e\x67\x67\x30\x75\x5b\xf7\x13\x94\x68\x64\x84\xcd\x58\xf6\xdc\x5a\xc1\x1d\x0f\xc1\xf5\x6e\xb0\x65\x62\x63\x7d\xf5\x3c\xb7\x2e\x83\x33\x2e\x1b\x14\x97\x12\xf5\x12\x1f\x68\x88\x1c\xea\xd6\xe5\x14\xb0\xb2\x44\x99\x5e\xe5\x5c\xa4\x5e\x0d\x1f\xf7\xd4\x9e\x46\xc7\x6f\x4f\xe3\x5e\xf2\xba\xef\xc6\xb3\x43\xb2\xc7\xa3\xe5\xbb\x6e\x80\x21\xbb\xf5\x5e\x90\x08\x65\xd0\xbb\x9c\x4c\x26\x17\xe0\x7e\x54\xfa\x1e\x12\x55\x94\x02\x09\xfb\xdc\x3c\x1d\x32\x78\x68\x26\xdc\xc1\x47\x5c\x2d\xaa\xb5\xf7\x75\x67\xa6\x61\xf8\xd3\xe3\x8e\xcb\x54\xed\x02\xa1\x12\x56\x91\x92\x2b\x43\x4f\xe1\xce\x84\x3f\x3d\x36\x47\xaf\xc8\x7d\xfa\xda\xaf\xc5\x26\x16\x25\x55\x89\x36\x69\xdd\x01\x3d\x1c\x06\x6d\x93\xab\x04\x06\x42\x65\xde\xd7\x4f\x56\xfb\x33\x5c\x29\x29\xb1\x56\xb7\x23\x68\x25\xb8\xc9\x31\x85\x1d\xa7\xbc\x4d\xc3\x14\xce\x78\xef\xce\x76\x2e\x90\xa2\x1e\x58\xc3\x58\xb6\x28\xe9\x34\x1e\x02\x2e\x13\x55\x70\x99\xdd\x75\xa0\x7f\x2e\x7e\x7d\x17\x94\xf6\x2a\x5d\xa3\xaa\xef\xe9\x78\xd0\x07\x35\x54\xab\xdd\x0b\x45\x4a\x7a\x58\xa0\x35\xa6\xe4\xe9\x4b\x98\xf4\x2c\x46\x73\xa5\x39\xed\xbf\x1b\x68\xf6\x86\xb0\x48\xed\xe4\xff\x6e\xac\x46\x26\xec\x6d\xac\xfb\x38\x7c\xb7\x85\x43\x1a\x5e\xc6\x9d\x73\x9d\xda\x11\x7c\xdd\x56\xea\x35\x23\xf4\xaa\x8c\xdc\x4a\xf2\x8e\x32\x16\x7c\xf9\xf2\xdb\xcd\x9b\xb7\xcb\xdb\xbb\x9b\x2f\xf6\xbf\xc5\xf2\xcd\xdd\xfb\x71\x68\xbb\x62\x68\xbc\xe4\xe9\xa0\xcd\x4f\xec\xbc\xbf\xbd\x1e\x00\x7a\xf4\x05\x89\x60\xc6\x34\x53\xcc\xb5\x17\x5b\xf7\x19\xc5\x17\x3d\x2c\x7e\x5f\x2c\x6f\xee\xae\xbf\xd8\x89\x39\x70\x75\xc2\xf6\xd0\x61\x77\x2d\x76\x5f\xc4\xf4\x7d\x1f\x48\x0c\x48\xbd\x55\xf6\x07\xd9\x82\x34\x97\x99\x37\x64\xa5\xc9\xd2\x8b\x71\xdf\xdd\x2c\x16\x6f\xfe\x7e\x73\x26\x55\xed\x15\xe6\xfc\x05\xfa\x97\xfd\x6d\xea\xb9\xad\x8e\x3b\x1e\x9c\x58\xed\x06\x83\xb4\xe4\xe9\xa0\x86\x8e\xe5\x3d\x8e\x5f\xd4\x3b\x61\xe5\x45\xed\xe6\xf4\x43\x4a\xaa\xef\xff\xd0\xa8\xda\x0d\xcc\xb4\x47\x0a\xea\x97\xa5\xf2\x1e\x49\x95\xd3\xe3\xfd\x7f\x54\x17\xc1\x0b\x58\x61\xce\xb6\xdc\xfe\x54\x72\x4c\xa1\x14\xe5\xce\xd3\xb8\x3f\xc2\x9a\x97\xd1\xe9\xd5\x3c\x0a\x9b\x5f\x31\x51\x58\xff\x21\xe0\x7f\x01\x00\x00\xff\xff\xa2\x16\x53\xa4\x19\x10\x00\x00")



func assets_index_html() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/index.html": assets_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
	}},
}}
