package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x6d\x6f\xdb\xba\x15\xfe\xee\x5f\xc1\xab\xdb\x41\x32\x10\x5b\x71\x0b\x0c\x81\x23\x19\xc8\x12\x6f\xc8\xd0\xa4\x41\xed\xa0\x2b\xba\x22\xa5\xa5\x63\x89\x0b\x45\xaa\xe4\x71\x14\xaf\xc8\x7f\xbf\xa0\x28\xc9\x94\xe3\x18\x68\x3f\xd4\x24\xcf\x79\xce\xcb\x73\x5e\xec\x44\x7f\x5c\x7d\xba\x5c\x7e\xbd\x9b\x93\x1c\x0b\x3e\x1b\x44\xe6\x83\x70\x2a\xb2\xd8\x03\xe1\xcd\x06\x03\x42\xa2\x1c\x68\x3a\x1b\x10\x42\x48\x54\x00\x52\x92\xe4\x54\x69\xc0\xd8\xbb\x5f\xfe\x73\x74\xe6\xb9\xa2\x1c\xb1\x1c\xc1\xcf\x0d\x7b\x8a\xbd\xff\x8c\xee\x2f\x46\x97\xb2\x28\x29\xb2\x15\x07\x8f\x24\x52\x20\x08\x8c\xbd\xeb\x79\x0c\x69\x06\x3d\xa4\xa0\x05\xc4\xde\x13\x83\xaa\x94\x0a\x1d\xe5\x8a\xa5\x98\xc7\x29\x3c\xb1\x04\x46\xf5\xe5\x84\x30\xc1\x90\x51\x3e\xd2\x09\xe5\x10\x4f\xc6\xa7\xad\x29\x64\xc8\x61\xf6\x3f\xb9\x51\x82\xf2\x04\x79\x14\xda\x97\x81\x15\x6b\xdc\x9a\x0b\xa9\xff\xad\x64\xba\x25\xbf\x9a\x0b\x21\x6b\x29\x70\xb4\xa6\x05\xe3\xdb\x29\xf1\x2f\xe5\x46\x31\x50\xe4\x16\x2a\xff\x84\x34\xb7\x13\x52\x48\x21\x75\x49\x13\x38\xef\xe3\x34\xfb\x3f\x4c\xc9\xe4\x43\xf9\xdc\x0a\x5e\x06\xcd\xc1\xb0\x07\xca\x71\x94\x32\x5d\x72\xba\x9d\x92\x35\x87\xe7\x9d\x1d\xca\x59\x26\x46\x0c\xa1\xd0\x53\x92\x80\x40\x50\x6f\xd9\xca\x27\x6e\xdc\x1c\x9e\x47\x99\x92\xd5\x94\x4c\x5e\x01\x90\xae\x38\x38\xca\x2b\xa9\x52\x50\xa3\x44\x72\x4e\x4b\x0d\x53\xd2\x9e\x5e\xbb\xc2\x82\x7f\x4b\x29\xd2\x11\xe6\x50\x40\xec\xa7\x54\x3d\xfa\xdf\x1d\x5b\x84\xac\x68\xf2\x98\x29\xb9\x11\xe9\x94\xfc\xf9\xfe\xec\x3d\xfd\xf0\xf7\x73\x47\x9c\x48\x2e\xd5\x94\xfc\xb9\x3e\x5b\x9f\xad\xdf\xef\x79\x88\xc2\xa6\x18\xa6\xc3\x42\xdb\x62\xe6\x68\xaa\xd2\x95\x2b\x51\xac\xc4\xb6\x5e\x83\xd6\xaa\xd0\x58\x87\x47\x62\x92\xca\x64\x53\x80\xc0\x71\x06\x38\xe7\x60\x8e\xfa\x1f\xdb\x25\xcd\x6e\x69\x01\x81\x6f\xb4\xfc\xe1\xb7\xd3\xef\x6d\x56\xeb\x8d\x48\x90\x49\x41\x50\x66\x19\x87\xa5\x49\x2d\x18\x3a\x49\x71\x40\x92\x6c\x94\x02\x81\xb5\x90\xc4\xb5\xab\xb1\x61\x42\x03\x8e\x6b\x32\x3a\x6d\xb6\x26\x41\x5f\x3b\x8e\x89\x65\x6a\x78\x00\x47\x62\xe2\x73\x96\xe5\xe8\x77\x16\x80\x6b\x78\x43\xb3\x36\xd3\x91\xd6\x70\xd6\x30\x62\xaf\xb6\x1d\x5a\x7e\xa2\x7c\xe2\x74\x3e\x29\x95\x7c\xde\x46\x61\x3e\xe9\xe4\x29\x7b\x9a\x75\x8e\x23\x0d\x1c\x12\x24\x52\x24\x39\x15\x19\xc4\x9e\x46\xaa\xf0\x23\xd3\x08\x82\x89\x6c\x29\x17\xa0\xcc\xcc\x05\x43\x6f\xe6\x14\x35\x92\xa5\x21\x70\xb6\xb0\x70\x6d\x95\xa2\xb0\x79\xde\xd9\x0f\xad\x03\xe7\x65\xb5\x41\x94\xc2\x78\xe4\x2c\x79\x8c\xbd\x5e\x0d\xbc\xd9\xb2\xbe\x92\x1b\x99\x42\x14\x5a\xdd\x2e\xf4\xb0\x8b\xdd\xf6\x8a\xc9\x7a\xd0\x26\x45\xea\x4e\x8a\x3d\xf9\x04\x6a\xcd\x65\x35\x7a\x9e\xd2\x0d\xca\xf3\x2e\xee\xc8\x8e\x81\x6d\xfe\xd8\x9b\x78\xc4\x2e\x15\x6f\x72\x7a\xfa\x37\x27\xbb\x08\x77\xab\xae\x7d\x51\xee\xb5\x56\x99\xdd\x5d\x5f\x45\x21\xe6\xaf\x05\xf7\x82\xe1\x61\xc9\x92\x15\xa0\x91\x16\xe5\x61\xf1\x0d\x68\x4d\x33\xd8\x17\x46\xa1\xeb\xde\x48\x7b\xe1\x45\x58\x0f\x4b\x14\xda\xcf\x8e\xab\x3a\xdb\x96\xad\x8e\xb8\xbd\x99\x1a\xec\xfa\x5d\xcb\xe4\x11\x90\xc4\x44\x6c\x38\x3f\x1f\xf4\xe6\xac\xe9\x12\x67\xd2\x7e\x6e\x40\x6d\x6d\xf5\xa5\x0a\x7c\xab\xe0\x0f\xcf\x7b\x30\x4b\xf8\xdb\xa8\x5a\x6e\x40\x0d\x2a\xa0\x7a\x2b\x12\x12\x0c\x49\x3c\x73\xa6\xb1\x8d\xa1\xee\x31\xfd\x19\x7e\x6e\x40\x9b\x60\x68\x45\x19\x92\x35\x60\x92\x07\x7e\xc8\x99\xc6\x51\xab\xb4\x8b\x64\x1f\x6e\x5a\xbb\xc3\xee\xd9\x1c\x23\x3c\x63\xb0\x8b\xc7\xac\x75\x45\x02\xc3\x0e\x67\x02\x88\x5c\xf7\xcc\x8c\x75\xc9\x19\x06\xfe\x7f\x85\x3f\x1c\xf6\x56\x62\xad\x1d\xd7\x1f\x63\x54\xac\x08\x86\xee\x46\x34\xfb\xc2\x6a\x98\x3d\xe1\x0f\xc9\x4a\x01\x7d\x74\xbc\x5a\x95\x3f\x6a\x78\x3d\x8f\xfa\x0b\xc3\x3c\xf0\xef\x6f\xaf\x97\xfb\xae\xf6\xf2\x33\x1b\xaf\xf5\xdc\x84\x47\xea\xdd\x77\x7e\x00\x63\xa7\xd5\x2d\x50\xa2\x80\x22\x34\x3b\x34\xf0\xad\x82\x3f\xec\x83\xed\xeb\xf8\x89\xf2\x8d\xf1\xe5\x78\x6e\x5d\x8e\x0f\xb8\x6c\x50\x4c\x08\x50\x4b\x78\xc6\x3e\xb2\xaf\x6b\xdb\x69\x4c\xcb\x12\x44\x7a\x99\x33\x9e\x06\x16\x3e\x74\xd4\x5e\x06\xfb\xa7\x97\xa1\x53\xbc\x6e\xc9\xbf\xb9\xd1\x1c\x1e\x0d\xdf\x76\x00\xfa\xec\xda\xb7\x71\xc2\xa5\x86\x60\x72\x7a\x7a\x7a\x42\xfc\x2f\x52\x3d\x92\x44\x16\x25\x07\x04\x97\x9b\x97\x5d\x05\x77\xc3\x04\x15\xf9\x02\xab\x45\x7d\x0f\x7e\x54\x7a\x1a\x86\xef\x7e\x55\x4c\xa4\xb2\x1a\x73\x99\xd0\x9a\x94\x5c\x6a\x7c\x09\x2b\x1d\xbe\xfb\xd5\xa4\x5e\x93\xfb\xf2\xc3\xed\xc5\x26\x16\x29\x64\x09\xa6\x68\x5d\x82\x01\xf4\x83\x36\xc5\x95\x1c\xc6\x5c\x66\xc1\x8f\x6f\x46\xfb\x3b\xb9\x94\x42\x80\x55\x37\x2b\x68\xc5\x99\xce\x21\x25\x15\xc3\xbc\x2d\xc3\x94\x1c\xf0\xde\xe5\x76\x28\x90\xc2\x2e\xac\x7e\x2c\x4f\x20\xf0\x75\x3c\x48\x98\x48\x64\xc1\x44\x76\xd3\x81\xfe\xbd\xf8\x74\x3b\x2e\xcd\xaf\x48\x8b\xaa\xbf\xfc\x86\xbd\x39\xb0\x50\x25\xab\x23\x4d\x8a\xaa\xdf\xa0\x16\x53\xb2\xf4\x18\x26\x3d\x88\x51\x4c\x2a\x86\xdb\xdf\x06\xea\xad\x46\x28\x52\xb3\xf9\x7f\x1b\xab\x80\x72\x64\x05\x74\x5f\x0e\xbf\x6d\x61\x57\x86\xe3\x38\x07\x58\xb2\xb4\x37\x89\x7b\xc5\x19\x3f\xdc\x5d\x5f\xb9\x8e\x9c\x04\x8f\xe3\x16\x5f\x17\xcb\xf9\xcd\xd5\x83\x59\x55\xae\x81\x57\x59\x1e\x37\xf3\xf0\x79\x7e\xf1\x71\x79\x7d\x33\x7f\x30\xff\x2d\x96\x17\x37\x77\xae\xb5\x26\xe3\xa3\x36\x6e\xe6\x8b\xc5\xc5\xbf\xe6\xbd\xb4\x95\xac\x7a\x4b\xa5\x64\x69\x8f\xcf\x7d\xb9\x93\xf6\x51\xbd\x57\xd9\x1d\xd5\x6e\xa2\xef\x57\xa4\xfe\x2e\xec\x1b\x95\x55\x7f\x00\x9b\xc3\xe0\xf5\xaf\xc0\x28\x6c\x7e\x30\x47\xa1\xfd\x0b\xee\xaf\x00\x00\x00\xff\xff\xa1\xe3\x3b\x9a\xd2\x0d\x00\x00")

func assets_index_html() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/index.html": assets_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
	}},
}}
